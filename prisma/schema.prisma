generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación si es paciente
  appointments Appointment[] @relation("PatientAppointments")

  // Relación si es doctor
  doctorAppointments Appointment[] @relation("DoctorAppointments")

  // Relación con los bloques de tiempo que ofrece el doctor
  timeBlocks TimeBlock[]
}

model Appointment {
  id          Int               @id @default(autoincrement())
  date        DateTime
  timeBlockId Int
  patientId   Int
  doctorId    Int
  status      AppointmentStatus @default(PENDING)
  notes       String?
  reason      String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relaciones
  timeBlock TimeBlock @relation(fields: [timeBlockId], references: [id])
  patient   User      @relation("PatientAppointments", fields: [patientId], references: [id])
  doctor    User      @relation("DoctorAppointments", fields: [doctorId], references: [id])
}

model TimeBlock {
  id        Int      @id @default(autoincrement())
  doctorId  Int // NUEVO: indica a qué doctor pertenece este bloque
  startTime DateTime
  endTime   DateTime
  date      DateTime @default(now()) // día para el que aplica el bloque

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  doctor       User          @relation(fields: [doctorId], references: [id])
  appointments Appointment[]
}

enum Role {
  ADMIN
  PATIENT
  DOCTOR
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
